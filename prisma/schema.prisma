generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  gender            String
  dob               DateTime
  phone             String?
  isVerified        Boolean        @default(false)
  isActive          Boolean        @default(true)
  lastLogin         DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  blockedBy         BlockedUser[]  @relation("BlockedUsers")
  blockedUsers      BlockedUser[]
  horoscope         Horoscope?
  receivedInterests Interest[]     @relation("ReceivedInterests")
  sentInterests     Interest[]     @relation("SentInterests")
  membership        Membership?
  receivedMessages  Message[]      @relation("ReceivedMessages")
  sentMessages      Message[]      @relation("SentMessages")
  notifications     Notification[]
  photos            Photo[]
  preferences       Preferences?
  profile           Profile?
  shortlistedBy     Shortlist[]    @relation("ShortlistedUsers")
  shortlist         Shortlist[]
  viewedProfiles    ProfileView[]  @relation("ProfileViewer")
  profileViews      ProfileView[]  @relation("ProfileViewed")
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  height           String?
  weight           String?
  maritalStatus    String?
  religion         String?
  caste            String?
  subCaste         String?
  motherTongue     String?
  education        String?
  occupation       String?
  annualIncome     String?
  workLocation     String?
  fatherName       String?
  fatherOccupation String?
  motherName       String?
  motherOccupation String?
  siblings         String?
  familyType       String?
  familyStatus     String?
  aboutMe          String?
  hobbies          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model Membership {
  id            String   @id @default(cuid())
  userId        String   @unique
  plan          String
  duration      Int
  paymentStatus String
  startDate     DateTime
  endDate       DateTime
  features      String[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Interest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedInterests", fields: [receiverId], references: [id])
  sender     User     @relation("SentInterests", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model Photo {
  id         String   @id @default(cuid())
  userId     String
  url        String
  isProfile  Boolean  @default(false)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Horoscope {
  id           String   @id @default(cuid())
  userId       String   @unique
  dateOfBirth  DateTime
  timeOfBirth  String?
  placeOfBirth String?
  rashi        String?
  nakshatra    String?
  gotra        String?
  manglik      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Preferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  ageFrom       Int?
  ageTo         Int?
  heightFrom    String?
  heightTo      String?
  maritalStatus String?
  religion      String?
  caste         String?
  education     String?
  occupation    String?
  location      String?
  income        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Shortlist {
  id                String   @id @default(cuid())
  userId            String
  shortlistedUserId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  shortlistedUser   User     @relation("ShortlistedUsers", fields: [shortlistedUserId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, shortlistedUserId])
}

model BlockedUser {
  id            String   @id @default(cuid())
  userId        String
  blockedUserId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  blockedUser   User     @relation("BlockedUsers", fields: [blockedUserId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, blockedUserId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Verification {
  id           String    @id @default(cuid())
  userId       String    @unique
  documentType String
  documentUrl  String
  selfieUrl    String
  status       String    @default("pending")
  adminNotes   String?
  submittedAt  DateTime  @default(now())
  reviewedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ProfileView {
  id            String   @id @default(cuid())
  viewerId      String
  viewedUserId  String
  viewer        User     @relation("ProfileViewer", fields: [viewerId], references: [id])
  viewedUser    User     @relation("ProfileViewed", fields: [viewedUserId], references: [id])
  viewedAt      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([viewerId, viewedUserId])
}
